{"version":3,"file":"ngx-socket-io.umd.js","sources":["../../src/socket-io.service.ts","../../src/socket-io.module.ts","../../ngx-socket-io.ts"],"names":["io.default","io","Observable","share","InjectionToken","NgModule"],"mappings":"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","sourcesContent":["import { Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport * as io from 'socket.io-client';\n\nimport { SocketIoConfig } from './config/socket-io.config';\n\nexport class WrappedSocket {\n    subscribersCounter: Record<string, number> = {};\n    eventObservables$: Record<string, Observable<any>> = {};\n    ioSocket: any;\n    emptyConfig: SocketIoConfig = {\n        url: '',\n        options: {}\n    };\n\n    constructor(private config: SocketIoConfig) {\n        if (config === undefined) {\n            config = this.emptyConfig;\n        }\n        const url: string = config.url;\n        const options: any = config.options;\n        const ioFunc = (io as any).default ? (io as any).default : io;\n        this.ioSocket = ioFunc(url, options);\n    }\n\n    of(namespace: string) {\n        this.ioSocket.of(namespace);\n    }\n\n    on(eventName: string, callback: Function) {\n        this.ioSocket.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: Function) {\n        this.ioSocket.once(eventName, callback);\n    }\n\n    connect() {\n        return this.ioSocket.connect();\n    }\n\n    disconnect(close?: any) {\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\n    }\n\n    emit(eventName: string, ...args: any[]) {\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\n    }\n\n    removeListener(eventName: string, callback?: Function) {\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\n    }\n\n    removeAllListeners(eventName?: string) {\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\n    }\n\n    fromEvent<T>(eventName: string): Observable<T> {\n        if (!this.subscribersCounter[eventName]) {\n            this.subscribersCounter[eventName] = 0;\n        }\n        this.subscribersCounter[eventName]++;\n\n        if (!this.eventObservables$[eventName]) {\n            this.eventObservables$[eventName] = new Observable((observer: any) => {\n                const listener = (data: T) => {\n                    observer.next(data);\n                };\n                 this.ioSocket.on(eventName, listener);\n                 return () => {\n                     this.subscribersCounter[eventName]--;\n                     if (this.subscribersCounter[eventName] === 0) {\n                        this.ioSocket.removeListener(eventName, listener);\n                        delete this.eventObservables$[eventName];\n                     }\n                };\n            }).pipe(\n                share()\n            );\n        }\n        return this.eventObservables$[eventName];\n    }\n\n    fromOneTimeEvent<T>(eventName: string): Promise<T> {\n        return new Promise<T>(resolve => this.once(eventName, resolve));\n    }\n\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { SocketIoConfig } from './config/socket-io.config';\nimport { WrappedSocket } from './socket-io.service';\n\n/** Socket factory */\nexport function SocketFactory(config: SocketIoConfig) {\n    return new WrappedSocket(config);\n}\n\nexport const SOCKET_CONFIG_TOKEN = new InjectionToken<SocketIoConfig>('__SOCKET_IO_CONFIG__');\n\n@NgModule({})\nexport class SocketIoModule {\n    static forRoot(config: SocketIoConfig): ModuleWithProviders<SocketIoModule> {\n        return {\n            ngModule: SocketIoModule,\n            providers: [\n                { provide: SOCKET_CONFIG_TOKEN, useValue: config },\n                {\n                    provide: WrappedSocket,\n                    useFactory: SocketFactory,\n                    deps : [SOCKET_CONFIG_TOKEN]\n                }\n            ]\n        };\n    }\n }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {SOCKET_CONFIG_TOKEN as ɵb,SocketFactory as ɵa} from './src/socket-io.module';"]}